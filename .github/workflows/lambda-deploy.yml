name: Lambda Deploy

on:
  workflow_call:
    inputs:
      BUILD_TARGET:
        type: string
        required: false
        default: release
      NODE_ENV:
        type: string
        required: false
        default: production
      VITE_MODE:
        type: string
        required: false
        default: production
      AWS_REGION:
        type: string
        required: false
        default: us-east-1
    secrets:
      NPM_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      ECR_REPOSITORY:
        required: true
      LAMBDA_FUNCTION_ARN:
        required: true

jobs:
  ecs:
    runs-on: ubuntu-latest
    steps:
      - name: checkout actions
        uses: actions/checkout@master
      
      - name: Get branch name
        id: vars
        run: echo "{stage}={${GITHUB_REF#refs/*/}}" >> $GITHUB_STATE

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          BUILD_TARGET: ${{ inputs.BUILD_TARGET }}
          NODE_ENV: ${{ inputs.NODE_ENV }}
          VITE_MODE: ${{ inputs.VITE_MODE }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --target $BUILD_TARGET --build-arg NPM_TOKEN=$NPM_TOKEN -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to Amazon Lambda Service
        id: update-lambda-function
        env:
          LAMBDA_FUNCTION_ARN: ${{ secrets.LAMBDA_FUNCTION_ARN }}
          IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ secrets.IMAGE_TAG }}
        run: |
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_ARN --image-uri $IMAGE_URI

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
