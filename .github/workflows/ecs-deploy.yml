name: ECS Deploy

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
        required: true
      SERVER_MODE:
        type: string
        required: true

    secrets:
      NPM_TOKEN:
        required: false
      FORTAWESOME_TOKEN:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    name: ${{ inputs.ENVIRONMENT }} - ${{ inputs.SERVER_MODE }}
    steps:
      - name: checkout actions
        uses: actions/checkout@v3

      - name: Get branch name
        id: vars
        run: echo "{stage}={${GITHUB_REF#refs/*/}}" >> $GITHUB_STATE

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          BUILD_TARGET: ${{ vars.BUILD_TARGET }}
          NODE_ENV: ${{ vars.NODE_ENV }}

          SERVER_MODE: ${{ inputs.SERVER_MODE }}
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          SERVER_COOKIE_DOMAIN: ${{ vars.SERVER_COOKIE_DOMAIN }}

          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          FORTAWESOME_TOKEN: ${{ secrets.FORTAWESOME_TOKEN }}

          SERVER_SESSION_SECRET_KEY: ${{ secrets.SERVER_SESSION_SECRET_KEY }}
          SERVER_KEYGRIP_KEY_A: ${{ secrets.SERVER_KEYGRIP_KEY_A }}
          SERVER_KEYGRIP_KEY_B: ${{ secrets.SERVER_KEYGRIP_KEY_B }}
          SERVER_KEYGRIP_KEY_C: ${{ secrets.SERVER_KEYGRIP_KEY_C }}

        run: |
          docker build --target $BUILD_TARGET --build-arg NPM_TOKEN=$NPM_TOKEN --build-arg FORTAWESOME_TOKEN=$FORTAWESOME_TOKEN -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        env:
          ECS_TASK: ${{ secrets.ECS_TASK }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: ecs-cd-starter-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.ecs-cd-starter-container.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}